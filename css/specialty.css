/** Affixes an element to the centre of its containing element. */
.vcentre{
	display:    inline-block;
	position:   absolute;
	top:        50%;
	left:       50%;

	-webkit-transform: translate(-50%, -50%);
	-moz-transform:    translate(-50%, -50%);
	-ms-transform:     translate(-50%, -50%);
	-o-transform:      translate(-50%, -50%);
	transform:         translate(-50%, -50%);
}


/** Enable iOS flick-scrolling in CSS */
body{
	-webkit-overflow-scrolling: touch;
}


/** AJAX-loading state */
.loader{
	position: relative;
}
	.loader::after{
		background: url("../img/load.gif") no-repeat 50% 50% #000;
		display: block;
		position: absolute;
		top:    0;
		left:   0;
		width:  0;
		height: 0;
		z-index: 400;

		content: "";
		opacity: 0;

		-webkit-transition: .25s opacity ease 0s,   0s width linear .25s,   0s height linear .25s;
		-moz-transition:    .25s opacity ease 0s,   0s width linear .25s,   0s height linear .25s;
		-o-transition:      .25s opacity ease 0s,   0s width linear .25s,   0s height linear .25s;
		transition:         .25s opacity ease 0s,   0s width linear .25s,   0s height linear .25s;
	}

	.loader.show::after{
		width:  100%;
		height: 100%;
		opacity: .65;
		
		-webkit-transition-delay: 0s;
		-moz-transition-delay:    0s;
		-o-transition-delay:      0s;
		transition-delay:         0s;
	}


/**
 * Useful for customising form fields. Stretches, overlays and hides an element inside a positioned container,
 * allowing for custom form markup to be laid out underneath.
 */
.shrink-wrap{
	position: absolute;
	display: block;
	top:     0;
	left:    0;
	width:   100%;
	height:  100%;
	opacity: 0;
	z-index: 99;
}



/**
 *  Scalable stamp: suitable for starbursts.
 *  <div class="stamp">
 *      <img src="stamp.png" alt="" />
 *      <span>New</span>
 *  </div>
 */
.stamp{
	position: relative;
	display: inline-block;
	text-align: center;
}
	.stamp > img{
		position: absolute;
		width: 100%;
		height: auto;
		display: block;
		top: 50%;
		margin-top: -50%;
	}
	.stamp > span{
		display: inline-block;
		position: relative;
		z-index: 20;
		padding: 0 .5em;
	}



/** Embedded SVG images too complex or rare for integrating into an icon font */
.sigil{
	position: relative;
	cursor: pointer;
	z-index: 2;
	text-align: center;
	font-size: 1.5em;
}
	/** Aspect ratio */
	.sigil::before{
		content: "";
		display: block;
		padding-top: 100%;
	}

	/** Actual SVG element */
	.sigil > svg{
		position: absolute;
		top:     0;
		left:    0;
		width:   100%;
		height:  100%;
		z-index: 3;
	}
	
	/** Label, if any */
	.sigil > span{
		position: absolute;
		display: block;
		top:     50%;
		left:    0;
		right:   0;
		z-index: 4;

		-webkit-transform: translateY(-50%);
		-moz-transform:    translateY(-50%);
		-ms-transform:     translateY(-50%);
		-o-transform:      translateY(-50%);
		transform:         translateY(-50%);

		-webkit-backface-visibility: hidden;
		-moz-backface-visibility:    hidden;
		backface-visibility:         hidden;
	}



/** Smooth sliding effect for mobile dropdown menus */
.fold{
	overflow: hidden;
	overflow-y: auto;

	max-height: 100vh;
	max-height: -webkit-calc( 100vh - 3.125em);
	max-height: -moz-calc(    100vh - 3.125em);
	max-height: calc(         100vh - 3.125em);

	-webkit-transform:  translateY(0);
	-moz-transform:     translateY(0);
	-ms-transform:      translateY(0);
	-o-transform:       translateY(0);
	transform:          translateY(0);

	-webkit-transition: 0s step-end max-height, .3s ease -webkit-transform;
	-moz-transition:    0s step-end max-height, .3s ease -moz-transform;
	-o-transition:      0s step-end max-height, .3s ease -o-transform;
	transition:         0s step-end max-height, .3s ease transform;
}
	/** Closed state */
	.control[type="checkbox"]:checked ~ .fold,
	.control[type="radio"]:not(:checked) ~ .fold{
		-webkit-transform: translateY(-100%);
		-moz-transform:    translateY(-100%);
		-ms-transform:     translateY(-100%);
		-o-transform:      translateY(-100%);
		transform:         translateY(-100%);

		-webkit-transition-delay: .3s, 0s;
		-moz-transition-delay:    .3s, 0s;
		-o-transition-delay:      .3s, 0s;
		transition-delay:         .3s, 0s;
	}


/** Segmented navigation bar */
.segmented-nav{
	display: inline-table;
	vertical-align: top;
	white-space: nowrap;
	padding: 0;
	margin:  0;
	
	-webkit-border-radius:  .5em;
	-moz-border-radius:     .5em;
	border-radius:          .5em;
}
	.segmented-nav > li{
		display: table-cell;
		vertical-align: middle;
	}
		/** Actual thick, button-like links */
		.segmented-nav > li > a{
			display: block;
			text-align: center;
			padding: .5em 1em;
			border-left: 1px solid #666;
			border-right: 1px solid #444;
		}
			.segmented-nav > li:first-child > a {border-left:  none}
			.segmented-nav > li:last-child  > a {border-right: none}
	

		/** Set the navigation's first and last segments to use rounded corners */
		.segmented-nav > li:first-child,
		.segmented-nav > li:first-child > a{
			-webkit-border-top-left-radius:     inherit;
			-moz-border-radius-topleft:         inherit;
			border-top-left-radius:             inherit;
			
			-webkit-border-bottom-left-radius:  inherit;
			-moz-border-radius-bottomleft:      inherit;
			border-bottom-left-radius:          inherit;
		}

		.segmented-nav > li:last-child,
		.segmented-nav > li:last-child > a{
			-webkit-border-top-right-radius:    inherit;
			-moz-border-radius-topright:        inherit;
			border-top-right-radius:            inherit;

			-webkit-border-bottom-right-radius: inherit;
			-moz-border-radius-bottomright:     inherit;
			border-bottom-right-radius:         inherit;
		}


/** Basic CSS grid */
.grid{
	margin-left: -2%; /* This is how much we wish to separate each cell by */
}
	.grid > *{
		width: 25%;
		float: left;
		padding-left: 2%;
		outline: 1px solid red;
	}
	
	.grid::after{
		content: "";
		display: block;
		clear: both;
	}


/** Pipe-separated links */
.bars,
.bars > li{
	display: inline-block;
	list-style: none;
	padding: 0;
	margin:  0;
}
	.bars > li > a{
		white-space: nowrap;
		padding: .25em;
	}
		/** Vertical divider */
		.bars > li > a::after{
			content: "\A0";
			width: 0;
			font-size: 1.05em;
			border-left: 1px solid;
			margin: 0 -.2em 0 .4em;
		}

		.bars > li > a::after,
		.bars > li > a{
			display: inline-block;
			vertical-align: top;
		}

	/** Hide the first divider from sight, but don't remove it altogether; it's needed to maintain consistent vertical alignment */
	.bars > :last-child > a::after{
		border-left-color: transparent;
		margin: 0;
	}
